{"ast":null,"code":"import _asyncToGenerator from \"D:/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCarList, reqDeleteCartById, reqUpdateCheckedById } from \"../../api\";\nvar state = {\n  cartList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n};\nvar actions = {\n  //获取购物车列表数据\n  getCartList: function getCartList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCarList();\n\n            case 3:\n              result = _context.sent;\n\n              //console.log(result);\n              if (result.status == 200) {\n                commit('GETCARTLIST', result.data.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //删除购物车某一个产品\n  deleteCartListBySkuId: function deleteCartListBySkuId(_ref2, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.status == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", 'ok');\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  //修改购物车某一个产品的选中状态\n  updateCheckedById: function updateCheckedById(_ref3, _ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, skuID, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuID = _ref4.skuID, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedById(skuID, isChecked);\n\n            case 4:\n              result = _context3.sent;\n              console.log(result);\n\n              if (!(result.status == 200)) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", 'ok');\n\n            case 10:\n              return _context3.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  //删除全部选中的商品\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var dispatch = _ref5.dispatch,\n        getters = _ref5.getters;\n    //context:小仓库\n    //获取购物车中全部的商品【是一个数组】\n    var PromiseAll = [];\n    getters.cartList.cartInfoList.forEach(function (item) {\n      var promise = item.isChecked == 1 ? dispatch('deleteCartListBySkuId', item.skuId) : ''; //将每一次返回的promise添加到数组中\n\n      PromiseAll.push(promise);\n    }); //只要全部的p1,p2...都成功，返回结果即为成功，\n    //如果有一个失败，返回的即为失败结果\n\n    return Promise.all(PromiseAll);\n  },\n  //修改产品全选状态\n  updateAllCartIsChecked: function updateAllCartIsChecked(_ref6, isChecked) {\n    var dispatch = _ref6.dispatch,\n        state = _ref6.state;\n    var promiseAll = [];\n    state.cartList[0].cartInfoList.forEach(function (item) {\n      var promise = dispatch('updateCheckedById', {\n        skuIdL: item.skuId,\n        isChecked: isChecked\n      });\n      promiseAll.push(promise);\n    });\n    return Promise.all(promiseAll);\n  }\n};\nvar getters = {\n  cartList: function cartList(state) {\n    return state.cartList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["D:/my-app/src/store/shopCart/index.js"],"names":["reqCarList","reqDeleteCartById","reqUpdateCheckedById","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","status","data","deleteCartListBySkuId","skuId","Promise","reject","Error","updateCheckedById","skuID","isChecked","console","log","deleteAllCheckedCart","dispatch","getters","PromiseAll","cartInfoList","forEach","item","promise","push","all","updateAllCartIsChecked","promiseAll","skuIdL"],"mappings":"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","sourcesContent":["import {reqCarList, reqDeleteCartById, reqUpdateCheckedById} from \"../../api\";\r\n\r\n\r\nconst state = {\r\n  cartList: []\r\n}\r\n\r\nconst mutations = {\r\n  GETCARTLIST(state, cartList) {\r\n    state.cartList = cartList\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  //获取购物车列表数据\r\n  async getCartList({commit}) {\r\n    let result = await reqCarList();\r\n    //console.log(result);\r\n    if (result.status == 200) {\r\n      commit('GETCARTLIST', result.data.data)\r\n    }\r\n  },\r\n  //删除购物车某一个产品\r\n  async deleteCartListBySkuId({commit}, skuId) {\r\n    let result = await reqDeleteCartById(skuId);\r\n    //console.log(result);\r\n    if (result.status == 200) {\r\n      return 'ok';\r\n    } else {\r\n      return Promise.reject(new Error('faile'))\r\n    }\r\n  },\r\n  //修改购物车某一个产品的选中状态\r\n  async updateCheckedById({commit}, {skuID, isChecked}) {\r\n    let result = await reqUpdateCheckedById(skuID, isChecked);\r\n    console.log(result);\r\n    if (result.status == 200) {\r\n      return 'ok'\r\n    } else {\r\n      return Promise.reject(new Error('faile'))\r\n    }\r\n  },\r\n//删除全部选中的商品\r\n  deleteAllCheckedCart({dispatch, getters}) {\r\n    //context:小仓库\r\n    //获取购物车中全部的商品【是一个数组】\r\n    let PromiseAll = [];\r\n    getters.cartList.cartInfoList.forEach(item => {\r\n      let promise = item.isChecked == 1 ? dispatch('deleteCartListBySkuId', item.skuId) : '';\r\n      //将每一次返回的promise添加到数组中\r\n      PromiseAll.push(promise)\r\n    });\r\n    //只要全部的p1,p2...都成功，返回结果即为成功，\r\n    //如果有一个失败，返回的即为失败结果\r\n    return Promise.all(PromiseAll)\r\n  },\r\n  //修改产品全选状态\r\n  updateAllCartIsChecked({dispatch, state}, isChecked) {\r\n    let promiseAll = [];\r\n    state.cartList[0].cartInfoList.forEach(item => {\r\n      let promise = dispatch('updateCheckedById',{skuIdL:item.skuId,isChecked});\r\n      promiseAll.push(promise)\r\n    });\r\n    return Promise.all(promiseAll)\r\n  }\r\n}\r\n\r\nconst getters = {\r\n  cartList(state) {\r\n    return state.cartList[0] || {}\r\n  }\r\n}\r\n\r\nexport default {\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}"]},"metadata":{},"sourceType":"module"}