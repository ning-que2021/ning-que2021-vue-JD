{"ast":null,"code":"import _asyncToGenerator from \"D:/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport routes from \"./routes\";\nimport store from \"../store\";\nVue.use(VueRouter); //重写push|replace 方法\n\nvar originPush = VueRouter.prototype.push;\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    //call||apply区别\n    //相同点：都可以调用函数·篡改函数的上下文\n    //不同点：call传递参数要用，隔开  而apply传递参数要传递 数组[]\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, function () {}, function () {});\n  }\n}; //重写replace 方法\n\n\nvar originReplace = VueRouter.prototype.replace;\n\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, function () {}, function () {});\n  }\n};\n\nvar router = new VueRouter({\n  routes: routes,\n  //跳转后滚动行为\n  scrollBehavior: function scrollBehavior(to, from, savedPosition) {\n    return {\n      y: 0\n    };\n  }\n}); //全局守卫，前置守卫\n\nrouter.beforeEach( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var token, name, toPath;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //to可以获取到你要跳转到哪个路由的信息\n            //from：可以获取到你从哪个路由而来的信息\n            //next：放行函数   next() 全部放行; next（‘path’）放行到指定的路由\n            token = store.state.user.token; //用户信息\n\n            name = store.state.user.userInfo.name; //如果已经登录\n\n            if (!token) {\n              _context.next = 23;\n              break;\n            }\n\n            if (!(to.path == '/login')) {\n              _context.next = 7;\n              break;\n            }\n\n            next('/home');\n            _context.next = 21;\n            break;\n\n          case 7:\n            if (!name) {\n              _context.next = 11;\n              break;\n            }\n\n            next();\n            _context.next = 21;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return store.dispatch('getUserInfo');\n\n          case 14:\n            next();\n            _context.next = 21;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](11);\n            //token失效了获取不到用户信息，重新登录\n            //清楚token\n            store.dispatch('userLogout');\n            next('/login');\n\n          case 21:\n            _context.next = 25;\n            break;\n\n          case 23:\n            //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n            //未登录去上面这些路由-----登录\n            toPath = to.path;\n\n            if (toPath.indexOf('/trade') != -1 || toPath.indexOf('/pay') != -1 || toPath.indexOf('/center') != -1) {\n              //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n              next('/login?redirect=' + toPath);\n            } else {\n              //去的不是上面这些路由（home|search|shopCart）---放行\n              next();\n            }\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 17]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default router;","map":null,"metadata":{},"sourceType":"module"}