{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport throttle from \"lodash/throttle\";\nexport default {\n  name: 'ShopCart',\n\n  mounted() {\n    this.getData();\n  },\n\n  computed: { ...mapGetters(['cartList']),\n\n    //购物车数据\n    cartInfoList() {\n      return this.cartList.cartInfoList || [];\n    },\n\n    //计算购买产品的总价\n    totalPrice() {\n      let sum = 0;\n      let cartInfo = this.cartInfoList.filter(it => {\n        return it.isChecked == 1;\n      });\n      cartInfo.forEach(item => {\n        sum += item.skuNum * item.skuPrice;\n      });\n      return sum;\n    },\n\n    //判断底部复选框是否勾选\n    isAllCheck() {\n      return this.cartInfoList.every(item => item.isChecked == 1);\n    }\n\n  },\n  methods: {\n    //获取个人购物车数据\n    getData() {\n      this.$store.dispatch('getCartList');\n    },\n\n    //type:为了区分是哪个元素\n    //disnum：+变化量（1），-变化量（-1）input是最终的个数（并不是变化量）\n    //cart：哪一个产品，【身上有id】\n    handler: throttle(async function (type, disNum, cart) {\n      switch (type) {\n        case 'add':\n          disNum = 1;\n          break;\n\n        case 'minus':\n          disNum = cart.skuNum > 1 ? disNum = -1 : 0;\n          break;\n\n        case 'change':\n          if (isNaN(disNum) || disNum < 1) {\n            disNum = 0;\n          } else {\n            parseInt(disNum) - cart.skuNum;\n          }\n\n          break;\n      }\n\n      try {\n        await this.$store.dispatch('AddOrUpdateShopCart', {\n          skuId: cart.skuId,\n          skuNum: disNum\n        });\n        this.getData();\n      } catch (error) {}\n    }, 500),\n\n    //删除某一个产品的操作\n    async deleteCartById(skuId) {\n      try {\n        await this.$store.dispatch('deleteCartListBySkuId', skuId);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    //修改某个产品的勾选状态\n    async updateChecked(cart, event) {\n      //带给服务器的参数isChecked，不是布尔值，应该是0|1\n      try {\n        //如果修改数据成功，再次获取服务器数据（购物车）\n        let isChecked = event.target.checked ? \"1\" : \"0\";\n        await this.$store.dispatch(\"updateCheckedById\", {\n          skuId: cart.skuId,\n          isChecked\n        });\n        this.getData();\n      } catch (error) {\n        //如果失败提示\n        alert(error.message);\n      }\n    },\n\n    //删除全部选中的商品\n    async deleteAllCheckedCart() {\n      try {\n        await this.$store.dispatch('deleteAllCheckedCart');\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    //修改商品全选状态\n    async updateAllCartChecked(e) {\n      try {\n        let isChecked = e.target.checked ? '1' : '0';\n        await this.$store.dispatch('updateAllCartIsChecked', isChecked);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}