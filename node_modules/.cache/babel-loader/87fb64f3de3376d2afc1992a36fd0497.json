{"ast":null,"code":"import _asyncToGenerator from \"D:/exercise/web/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport routes from \"./routes\";\nimport store from \"../store\";\nVue.use(VueRouter); //重写push|replace 方法\n\nvar originPush = VueRouter.prototype.push;\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    //call||apply区别\n    //相同点：都可以调用函数·篡改函数的上下文\n    //不同点：call传递参数要用，隔开  而apply传递参数要传递 数组[]\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, function () {}, function () {});\n  }\n}; //重写replace 方法\n\n\nvar originReplace = VueRouter.prototype.replace;\n\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, function () {}, function () {});\n  }\n};\n\nvar router = new VueRouter({\n  routes: routes,\n  //跳转后滚动行为\n  scrollBehavior: function scrollBehavior(to, from, savedPosition) {\n    return {\n      y: 0\n    };\n  }\n}); //全局守卫，前置守卫\n\nrouter.beforeEach( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var token, name, toPath;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //to可以获取到你要跳转到哪个路由的信息\n            //from：可以获取到你从哪个路由而来的信息\n            //next：放行函数   next() 全部放行; next（‘path’）放行到指定的路由\n            token = store.state.user.token; //用户信息\n\n            name = store.state.user.userInfo.name; //如果已经登录\n\n            if (!token) {\n              _context.next = 23;\n              break;\n            }\n\n            if (!(to.path == '/login')) {\n              _context.next = 7;\n              break;\n            }\n\n            next('/home');\n            _context.next = 21;\n            break;\n\n          case 7:\n            if (!name) {\n              _context.next = 11;\n              break;\n            }\n\n            next();\n            _context.next = 21;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return store.dispatch('getUserInfo');\n\n          case 14:\n            next();\n            _context.next = 21;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](11);\n            //token失效了获取不到用户信息，重新登录\n            //清楚token\n            store.dispatch('userLogout');\n            next('/login');\n\n          case 21:\n            _context.next = 25;\n            break;\n\n          case 23:\n            //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n            //未登录去上面这些路由-----登录\n            toPath = to.path;\n\n            if (toPath.indexOf('/trade') != -1 || toPath.indexOf('/pay') != -1 || toPath.indexOf('/center') != -1) {\n              //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n              next('/login?redirect=' + toPath);\n            } else {\n              //去的不是上面这些路由（home|search|shopCart）---放行\n              next();\n            }\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 17]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default router;","map":{"version":3,"sources":["D:/exercise/web/my-app/src/router/index.js"],"names":["Vue","VueRouter","routes","store","use","originPush","prototype","push","location","resolve","reject","call","originReplace","replace","router","scrollBehavior","to","from","savedPosition","y","beforeEach","next","token","state","user","name","userInfo","path","dispatch","toPath","indexOf"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport routes from \"./routes\";\nimport store from \"../store\";\n\nVue.use(VueRouter)\n\n\n//重写push|replace 方法\nlet originPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    //call||apply区别\n    //相同点：都可以调用函数·篡改函数的上下文\n    //不同点：call传递参数要用，隔开  而apply传递参数要传递 数组[]\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, () => {\n    }, () => {\n    })\n  }\n}\n\n//重写replace 方法\nlet originReplace = VueRouter.prototype.replace;\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {\n    }, () => {\n    })\n  }\n}\n\n\nconst router = new VueRouter({\n  routes,\n  //跳转后滚动行为\n  scrollBehavior(to, from, savedPosition) {\n    return {y: 0}\n  }\n});\n//全局守卫，前置守卫\nrouter.beforeEach(async (to, from, next) => {\n  //to可以获取到你要跳转到哪个路由的信息\n  //from：可以获取到你从哪个路由而来的信息\n  //next：放行函数   next() 全部放行; next（‘path’）放行到指定的路由\n  let token = store.state.user.token;\n  //用户信息\n  let name = store.state.user.userInfo.name;\n  //如果已经登录\n  if (token) {\n    //已经登录还想去login，不能去返回首页\n    if (to.path == '/login') {\n      next('/home')\n    } else {\n      //登录，去的不是login，而是其他路由组件页面\n      //如果用户名已经有了 放行\n      if (name) {\n        next()\n      } else {\n        //如果没有用户信息，派发action让仓库存储用户信息再跳转\n        //妙\n        try {\n          await store.dispatch('getUserInfo');\n          next()\n        } catch (error) {\n          //token失效了获取不到用户信息，重新登录\n          //清楚token\n          store.dispatch('userLogout')\n          next('/login')\n        }\n      }\n    }\n  } else {\n    //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n    //未登录去上面这些路由-----登录\n    let toPath = to.path;\n    if (toPath.indexOf('/trade') != -1 || toPath.indexOf('/pay') != -1 || toPath.indexOf('/center') != -1) {\n      //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n      next('/login?redirect=' + toPath);\n    } else {\n      //去的不是上面这些路由（home|search|shopCart）---放行\n      next();\n    }\n  }\n})\n\nexport default router\n"]},"metadata":{},"sourceType":"module"}