{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\n// 这份文件就是用来做拦截的\nimport axios from 'axios'; // 创建一个单例（实例）\n\nvar requests = axios.create({\n  baseURL: '/api',\n  timeout: 4000\n}); // 拦截器 - 请求拦截\n\nrequests.interceptors.request.use(function (config) {\n  // 部分接口需要拿到token\n  var token = localStorage.getItem('token');\n\n  if (token) {\n    config.headers = {\n      'aa-token': token\n    };\n  }\n\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); // 拦截器 - 响应拦截\n\nrequests.interceptors.response.use(function (res) {\n  return res;\n}, function (err) {\n  return Promise.reject(err);\n}); // 整体导出\n\nexport default requests;","map":{"version":3,"sources":["D:/my-app/src/api/request.js"],"names":["axios","requests","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","err","Promise","reject","response","res"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,MADmB;AAE5BC,EAAAA,OAAO,EAAE;AAFmB,CAAb,CAAjB,C,CAKA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAAC,MAAM,EAAE;AACxC;AACA,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAGF,KAAH,EAAS;AACPD,IAAAA,MAAM,CAACI,OAAP,GAAiB;AACf,kBAAYH;AADG,KAAjB;AAGD;;AACD,SAAOD,MAAP;AACD,CATD,EASG,UAAAK,GAAG,EAAE;AACN,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAXD,E,CAcA;;AACAZ,QAAQ,CAACI,YAAT,CAAsBW,QAAtB,CAA+BT,GAA/B,CAAmC,UAAAU,GAAG,EAAE;AACtC,SAAOA,GAAP;AACD,CAFD,EAEG,UAAAJ,GAAG,EAAE;AACN,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAJD,E,CAMA;;AACA,eAAeZ,QAAf","sourcesContent":["// 这份文件就是用来做拦截的\r\n\r\nimport axios from 'axios'\r\n\r\n// 创建一个单例（实例）\r\nconst requests = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 4000\r\n})\r\n\r\n// 拦截器 - 请求拦截\r\nrequests.interceptors.request.use(config=>{\r\n  // 部分接口需要拿到token\r\n  let token = localStorage.getItem('token');\r\n  if(token){\r\n    config.headers = {\r\n      'aa-token': token\r\n    }\r\n  }\r\n  return config;\r\n}, err=>{\r\n  return Promise.reject(err)\r\n});\r\n\r\n\r\n// 拦截器 - 响应拦截\r\nrequests.interceptors.response.use(res=>{\r\n  return res;\r\n}, err=>{\r\n  return Promise.reject(err)\r\n});\r\n\r\n// 整体导出\r\nexport default requests;"]},"metadata":{},"sourceType":"module"}