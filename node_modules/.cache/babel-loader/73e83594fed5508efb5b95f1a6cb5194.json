{"ast":null,"code":"import _asyncToGenerator from \"D:/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCarList, reqDeleteCartById, reqUpdateCheckedById } from \"../../api\";\nvar state = {\n  cartList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n};\nvar actions = {\n  //获取购物车列表数据\n  getCartList: function getCartList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCarList();\n\n            case 3:\n              result = _context.sent;\n\n              //console.log(result);\n              if (result.status == 200) {\n                commit('GETCARTLIST', result.data.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //删除购物车某一个产品\n  deleteCartListBySkuId: function deleteCartListBySkuId(_ref2, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.status == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", 'ok');\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  //修改购物车某一个产品的选中状态\n  updateCheckedById: function updateCheckedById(_ref3, _ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, skuId, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuId = _ref4.skuId, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedById(skuId, isChecked);\n\n            case 4:\n              result = _context3.sent;\n\n              if (!(result.status == 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", 'ok');\n\n            case 9:\n              return _context3.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  //删除全部选中的商品\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var dispatch = _ref5.dispatch,\n        getters = _ref5.getters;\n    //context:小仓库\n    //获取购物车中全部的商品【是一个数组】\n    var PromiseAll = [];\n    getters.cartList.cartInfoList.forEach(function (item) {\n      var promise = item.isChecked == 1 ? dispatch('deleteCartListBySkuId', item.skuId) : ''; //将每一次返回的promise添加到数组中\n\n      PromiseAll.push(promise);\n    }); //只要全部的p1,p2...都成功，返回结果即为成功，\n    //如果有一个失败，返回的即为失败结果\n\n    return Promise.all(PromiseAll);\n  },\n  //修改产品全选状态\n  updateAllCartIsChecked: function updateAllCartIsChecked(_ref6, isChecked) {\n    var dispatch = _ref6.dispatch,\n        state = _ref6.state;\n  }\n};\nvar getters = {\n  cartList: function cartList(state) {\n    return state.cartList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["D:/my-app/src/store/shopCart/index.js"],"names":["reqCarList","reqDeleteCartById","reqUpdateCheckedById","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","status","data","deleteCartListBySkuId","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","dispatch","getters","PromiseAll","cartInfoList","forEach","item","promise","push","all","updateAllCartIsChecked"],"mappings":";;;;;;;AAAA,SAAQA,UAAR,EAAmBC,iBAAnB,EAAqCC,oBAArC,QAAgE,WAAhE;AAGA,IAAMC,KAAK,GAAC;AACVC,EAAAA,QAAQ,EAAC;AADC,CAAZ;AAIA,IAAMC,SAAS,GAAC;AACdC,EAAAA,WADc,uBACFH,KADE,EACIC,QADJ,EACa;AACzBD,IAAAA,KAAK,CAACC,QAAN,GAAiBA,QAAjB;AACD;AAHa,CAAhB;AAMA,IAAMG,OAAO,GAAC;AACZ;AACMC,EAAAA,WAFM,6BAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAARC,cAAAA,MAAQ,QAARA,MAAQ;AAAA;AAAA,qBACNT,UAAU,EADJ;;AAAA;AACrBU,cAAAA,MADqB;;AAEzB;AACA,kBAAIA,MAAM,CAACC,MAAP,IAAe,GAAnB,EAAuB;AACrBF,gBAAAA,MAAM,CAAC,aAAD,EAAeC,MAAM,CAACE,IAAP,CAAYA,IAA3B,CAAN;AACD;;AALwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM1B,GARW;AASZ;AACMC,EAAAA,qBAVM,wCAUyBC,KAVzB,EAU+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAdL,cAAAA,MAAc,SAAdA,MAAc;AAAA;AAAA,qBACtBR,iBAAiB,CAACa,KAAD,CADK;;AAAA;AACrCJ,cAAAA,MADqC;;AAAA,oBAGrCA,MAAM,CAACC,MAAP,IAAe,GAHsB;AAAA;AAAA;AAAA;;AAAA,gDAI/B,IAJ+B;;AAAA;AAAA,gDAMhCI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CANgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ1C,GAlBW;AAmBZ;AACMC,EAAAA,iBApBM,2CAoByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BT,cAAAA,MAA4B,SAA5BA,MAA4B;AAAlBK,cAAAA,KAAkB,SAAlBA,KAAkB,EAAXK,SAAW,SAAXA,SAAW;AAAA;AAAA,qBAChCjB,oBAAoB,CAACY,KAAD,EAAQK,SAAR,CADY;;AAAA;AAC/CT,cAAAA,MAD+C;;AAAA,oBAE/CA,MAAM,CAACC,MAAP,IAAe,GAFgC;AAAA;AAAA;AAAA;;AAAA,gDAG1C,IAH0C;;AAAA;AAAA,gDAK1CI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAL0C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpD,GA3BW;AA4Bd;AACEG,EAAAA,oBA7BY,uCA6B4B;AAAA,QAAlBC,QAAkB,SAAlBA,QAAkB;AAAA,QAATC,OAAS,SAATA,OAAS;AACtC;AACA;AACA,QAAIC,UAAU,GAAG,EAAjB;AACAD,IAAAA,OAAO,CAAClB,QAAR,CAAiBoB,YAAjB,CAA8BC,OAA9B,CAAsC,UAAAC,IAAI,EAAE;AAC1C,UAAIC,OAAO,GAAGD,IAAI,CAACP,SAAL,IAAgB,CAAhB,GAAoBE,QAAQ,CAAC,uBAAD,EAAyBK,IAAI,CAACZ,KAA9B,CAA5B,GAAmE,EAAjF,CAD0C,CAE1C;;AACAS,MAAAA,UAAU,CAACK,IAAX,CAAgBD,OAAhB;AACD,KAJD,EAJsC,CAStC;AACA;;AACA,WAAOZ,OAAO,CAACc,GAAR,CAAYN,UAAZ,CAAP;AACD,GAzCW;AA0CZ;AACAO,EAAAA,sBA3CY,yCA2C4BX,SA3C5B,EA2CsC;AAAA,QAA1BE,QAA0B,SAA1BA,QAA0B;AAAA,QAAjBlB,KAAiB,SAAjBA,KAAiB;AAEjD;AA7CW,CAAd;AAgDA,IAAMmB,OAAO,GAAC;AACZlB,EAAAA,QADY,oBACHD,KADG,EACG;AACb,WAAOA,KAAK,CAACC,QAAN,CAAe,CAAf,KAAmB,EAA1B;AACD;AAHW,CAAd;AAMA,eAAe;AACbD,EAAAA,KAAK,EAALA,KADa;AAEbE,EAAAA,SAAS,EAATA,SAFa;AAGbE,EAAAA,OAAO,EAAPA,OAHa;AAIbe,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import {reqCarList,reqDeleteCartById,reqUpdateCheckedById} from \"../../api\";\r\n\r\n\r\nconst state={\r\n  cartList:[]\r\n}\r\n\r\nconst mutations={\r\n  GETCARTLIST(state,cartList){\r\n    state.cartList = cartList\r\n  }\r\n}\r\n\r\nconst actions={\r\n  //获取购物车列表数据\r\n  async getCartList({commit}){\r\n    let result = await reqCarList();\r\n    //console.log(result);\r\n    if (result.status==200){\r\n      commit('GETCARTLIST',result.data.data)\r\n    }\r\n  },\r\n  //删除购物车某一个产品\r\n  async deleteCartListBySkuId({commit},skuId){\r\n    let result = await reqDeleteCartById(skuId);\r\n    //console.log(result);\r\n    if (result.status==200){\r\n      return  'ok';\r\n    } else {\r\n      return Promise.reject(new Error('faile'))\r\n    }\r\n  },\r\n  //修改购物车某一个产品的选中状态\r\n  async updateCheckedById({commit}, {skuId, isChecked}){\r\n    let result = await reqUpdateCheckedById(skuId, isChecked);\r\n    if (result.status==200){\r\n      return 'ok'\r\n    }else {\r\n      return Promise.reject(new Error('faile'))\r\n    }\r\n  },\r\n//删除全部选中的商品\r\n  deleteAllCheckedCart({dispatch,getters}){\r\n    //context:小仓库\r\n    //获取购物车中全部的商品【是一个数组】\r\n    let PromiseAll = [];\r\n    getters.cartList.cartInfoList.forEach(item=>{\r\n      let promise = item.isChecked==1 ? dispatch('deleteCartListBySkuId',item.skuId) : '';\r\n      //将每一次返回的promise添加到数组中\r\n      PromiseAll.push(promise)\r\n    });\r\n    //只要全部的p1,p2...都成功，返回结果即为成功，\r\n    //如果有一个失败，返回的即为失败结果\r\n    return Promise.all(PromiseAll)\r\n  },\r\n  //修改产品全选状态\r\n  updateAllCartIsChecked({dispatch,state},isChecked){\r\n    \r\n  }\r\n}\r\n\r\nconst getters={\r\n  cartList(state){\r\n    return state.cartList[0]||{}\r\n  }\r\n}\r\n\r\nexport default {\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}"]},"metadata":{},"sourceType":"module"}